CREATE TABLE products (
    product_id varchar(100) PRIMARY KEY,
    product_name varchar(255),
    category varchar(255),
    discount_percentage int,
    discounted_price numeric,
    actual_price numeric,
    rating numeric,
    rating_count numeric
);


 Table for user reviews
CREATE TABLE product_reviews (
    review_id varchar(200) PRIMARY KEY,
    user_id varchar(250),
    product_id varchar(100),
    rating numeric,
    user_name varchar(100),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);


1. Query for average rating of each product
SELECT 
    p.product_id,
    p.product_name,
    AVG(pr.rating) AS avg_rating
FROM 
    products p
LEFT JOIN 
    product_reviews pr ON p.product_id = pr.product_id
GROUP BY 
    p.product_id, p.product_name;

2. Top 10 users who have provided the most reviews:
SELECT 
    user_id,
    user_name,
    COUNT(review_id) AS total_reviews
FROM 
    product_reviews
GROUP BY 
    user_id, user_name
ORDER BY 
    total_reviews DESC
LIMIT 10;

3. User with only 1 review 
SELECT 
     user_id,
     user_name
FROM 
    product_reviews
GROUP BY 
      user_id,user_name  
HAVING 
     COUNT(review_id)=1;

4.Total revenue generated by each product (based on actual price):
SELECT 
    p.product_id,
    p.product_name,
    SUM(p.actual_price) AS total_revenue
FROM 
    products p
GROUP BY 
    p.product_id, p.product_name
ORDER BY 
    total_revenue DESC;

5.Categories with fewer products 
SELECT 
    category,
    COUNT(product_id) AS total_products
FROM 
    products
GROUP BY 
    category
ORDER BY 
    total_products;

6.Lowest rated products within each category:
SELECT 
    p.product_id,
    p.product_name,
    p.category,
    AVG(pr.rating) AS avg_rating,
    COUNT(pr.review_id) AS total_reviews
FROM 
    products p
LEFT JOIN 
    product_reviews pr ON p.product_id = pr.product_id
GROUP BY 
    p.product_id, p.product_name, p.category
HAVING 
    AVG(pr.rating) < 4.0
ORDER BY 
    p.category, avg_rating;

7. Lowest rated products overall:
  SELECT 
    p.product_id,
    p.product_name,
    p.category,
    AVG(pr.rating) AS avg_rating,
    COUNT(pr.review_id) AS total_reviews
FROM 
    products p
LEFT JOIN 
    product_reviews pr ON p.product_id = pr.product_id
GROUP BY 
    p.product_id, p.product_name, p.category
HAVING 
    AVG(pr.rating) < 4.0
ORDER BY 
    avg_rating;

8.Products with the highest average discount percentage:

SELECT 
    product_id,
    product_name,
    AVG(discount_percentage) AS avg_discount_percentage
FROM 
    products
GROUP BY 
    product_id, product_name
ORDER BY 
    avg_discount_percentage DESC;

9.Low-rated products with high discount percentage:
SELECT 
    p.product_id,
    p.product_name,
    p.category,
    AVG(pr.rating) AS avg_rating,
    p.discount_percentage,
    COUNT(pr.review_id) AS total_reviews
FROM 
    products p
LEFT JOIN 
    product_reviews pr ON p.product_id = pr.product_id
GROUP BY 
    p.product_id, p.product_name, p.category, p.discount_percentage
HAVING 
    AVG(pr.rating) < 4.0
    AND p.discount_percentage > 40  
ORDER BY 
    avg_rating;

10.Low-rated products with low sales volume:

SELECT 
    p.product_id,
    p.product_name,
    p.category,
    AVG(pr.rating) AS avg_rating,
    COUNT(pr.review_id) AS total_reviews,
    SUM(p.actual_price) AS total_sales
FROM 
    products p
JOIN 
    product_reviews pr ON p.product_id = pr.product_id
GROUP BY 
    p.product_id, p.product_name, p.category
HAVING 
    AVG(pr.rating) < 3.9
ORDER BY 
    total_sales;



